// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8ceb9162DecodeGithubComVoyakinHLokleBackendInternalModels(in *jlexer.Lexer, out *FileStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file":
			out.File = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8ceb9162EncodeGithubComVoyakinHLokleBackendInternalModels(out *jwriter.Writer, in FileStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"file\":"
		out.RawString(prefix[1:])
		out.String(string(in.File))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8ceb9162EncodeGithubComVoyakinHLokleBackendInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8ceb9162EncodeGithubComVoyakinHLokleBackendInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8ceb9162DecodeGithubComVoyakinHLokleBackendInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8ceb9162DecodeGithubComVoyakinHLokleBackendInternalModels(l, v)
}
func easyjson8ceb9162DecodeGithubComVoyakinHLokleBackendInternalModels1(in *jlexer.Lexer, out *DonwloadResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "files":
			if in.IsNull() {
				in.Skip()
				out.Files = nil
			} else {
				in.Delim('[')
				if out.Files == nil {
					if !in.IsDelim(']') {
						out.Files = make([]FileStruct, 0, 2)
					} else {
						out.Files = []FileStruct{}
					}
				} else {
					out.Files = (out.Files)[:0]
				}
				for !in.IsDelim(']') {
					var v1 FileStruct
					(v1).UnmarshalEasyJSON(in)
					out.Files = append(out.Files, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8ceb9162EncodeGithubComVoyakinHLokleBackendInternalModels1(out *jwriter.Writer, in DonwloadResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"files\":"
		out.RawString(prefix[1:])
		if in.Files == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Files {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DonwloadResp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8ceb9162EncodeGithubComVoyakinHLokleBackendInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DonwloadResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8ceb9162EncodeGithubComVoyakinHLokleBackendInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DonwloadResp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8ceb9162DecodeGithubComVoyakinHLokleBackendInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DonwloadResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8ceb9162DecodeGithubComVoyakinHLokleBackendInternalModels1(l, v)
}
func easyjson8ceb9162DecodeGithubComVoyakinHLokleBackendInternalModels2(in *jlexer.Lexer, out *DonwloadReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "file_name":
			if in.IsNull() {
				in.Skip()
				out.FileName = nil
			} else {
				in.Delim('[')
				if out.FileName == nil {
					if !in.IsDelim(']') {
						out.FileName = make([]string, 0, 4)
					} else {
						out.FileName = []string{}
					}
				} else {
					out.FileName = (out.FileName)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.FileName = append(out.FileName, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "response_type":
			out.ResponseType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8ceb9162EncodeGithubComVoyakinHLokleBackendInternalModels2(out *jwriter.Writer, in DonwloadReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"file_name\":"
		out.RawString(prefix)
		if in.FileName == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.FileName {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"response_type\":"
		out.RawString(prefix)
		out.String(string(in.ResponseType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DonwloadReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8ceb9162EncodeGithubComVoyakinHLokleBackendInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DonwloadReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8ceb9162EncodeGithubComVoyakinHLokleBackendInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DonwloadReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8ceb9162DecodeGithubComVoyakinHLokleBackendInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DonwloadReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8ceb9162DecodeGithubComVoyakinHLokleBackendInternalModels2(l, v)
}
func easyjson8ceb9162DecodeGithubComVoyakinHLokleBackendInternalModels3(in *jlexer.Lexer, out *DeleteReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = uint64(in.Uint64())
		case "file_name":
			out.FileName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8ceb9162EncodeGithubComVoyakinHLokleBackendInternalModels3(out *jwriter.Writer, in DeleteReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.UserID))
	}
	{
		const prefix string = ",\"file_name\":"
		out.RawString(prefix)
		out.String(string(in.FileName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8ceb9162EncodeGithubComVoyakinHLokleBackendInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8ceb9162EncodeGithubComVoyakinHLokleBackendInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8ceb9162DecodeGithubComVoyakinHLokleBackendInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8ceb9162DecodeGithubComVoyakinHLokleBackendInternalModels3(l, v)
}
